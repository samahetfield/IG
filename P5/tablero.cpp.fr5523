#include "tablero.h"
#include "stdlib.h"
#include "stdio.h"
#include "vertex.h"
#include <GL/glut.h>
#include <ctype.h>
#include <QImage>
#include <math.h>
#include <iostream>

Tablero::Tablero() : O3d::O3d()
{

}

Tablero::Tablero(int t) : O3d::O3d()
{

    tama = t;
    vector<_vertex3f> tablero;
    vector<_vertex3ui> tab_tri;
    //tablero.resize(4*tama*tama);
    for(int i=0; i<tama; i++){
        for(int j=0; j<tama; j++){
            tablero.push_back(_vertex3f(-(tama/2.0)+j,-(tama/2.0)+i,0));
            tablero.push_back(_vertex3f(1-(tama/2.0)+j,-(tama/2.0)+i,0));
            tablero.push_back(_vertex3f(1-(tama/2.0)+j,1-(tama/2.0)+i,0));
            tablero.push_back(_vertex3f(-(tama/2.0)+j,1-(tama/2.0)+i,0));

        }
    }

    int ite=0;

    for(int i=0; i<tama; i++){
        for(int j=0; j<tama; j++){
            ite = (tama*4)*i;
            tab_tri.push_back(_vertex3ui(ite + (j*4),ite +1+(j*4),ite+3+(j*4)));
            tab_tri.push_back(_vertex3ui(ite+1+(j*4),ite+2+(j*4), ite+3+(j*4)));
        }
    }

    for(int i=0; i<tablero.size(); i++)
        tab.addVertex(tablero[i]);

    for(int i=0; i<tab_tri.size(); i++)
        tab.addTriangle(tab_tri[i]);
    //tab = table;


}

void Tablero::draw_points(){
    tab.draw_points();
}

void Tablero::draw_all(){
    tab.draw_all();
}
void Tablero::draw_chess(){
    tab.draw_chess();
}

void Tablero::draw_edges(){
    tab.draw_edges();
}

void Tablero::draw_solid(){
    tab.draw_solid();
}

void Tablero::draw_tex(){

    glEnable(GL_TEXTURE_2D);
    glBegin(GL_TRIANGLES);

    float divisiones = 1.0/tama;
    int ite = 0;
    float inicio=0;
    float fin = 0;
    vector<float> tex_c;



    for(int i=0; i<tama; i++){
        for(int j=0; j<tama; j++){
            if((divisiones*j >= inicio) && (divisiones*j+divisiones <= fin)){
                ite = (tama*4)*i;
                glTexCoord2f(divisiones*j, divisiones*i);
                glVertex3f(tab.get_vertex(ite+(j*4)).x, tab.get_vertex(ite +(j*4)).y, tab.get_vertex(ite + (j*4)).z);
                glTexCoord2f(divisiones*j+divisiones, divisiones*i);
                glVertex3f(tab.get_vertex(ite +1+(j*4)).x, tab.get_vertex(ite+1+(j*4)).y, tab.get_vertex(ite+1+(j*4)).z);
                glTexCoord2f(divisiones*j, divisiones*i+divisiones);
                glVertex3f(tab.get_vertex(ite+3+(j*4)).x, tab.get_vertex(ite+3+(j*4)).y, tab.get_vertex(ite+3+(j*4)).z);
                glTexCoord2f(divisiones*j+divisiones, divisiones*i);
                glVertex3f(tab.get_vertex(ite+1+(j*4)).x, tab.get_vertex(ite+1+(j*4)).y, tab.get_vertex(ite+1+(j*4)).z);
                glTexCoord2f(divisiones*j+divisiones, divisiones*i+divisiones);
                glVertex3f(tab.get_vertex(ite+2+(j*4)).x, tab.get_vertex(ite+2+(j*4)).y, tab.get_vertex(ite+2+(j*4)).z);
                glTexCoord2f(divisiones*j, divisiones*i+divisiones);
                glVertex3f(tab.get_vertex(ite+3+(j*4)).x, tab.get_vertex(ite+3+(j*4)).y, tab.get_vertex(ite+3+(j*4)).z);
            }
        }
    }

    glEnd();

}

